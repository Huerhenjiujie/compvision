#!/bin/bash
#
# imagej-filter.bash
#
# Uses the ImageJ-linux64 executable (that's part of the Fiji.app prebuilt
# binary) to process an input TIFF file.  Rather than invoking ImageJ three
# times (once for each stage of the pipeline) this script writes a macro
# file that combines all of the operations.  Thus, ImageJ is executed only
# once.
#

# By default expect to find the executable on the PATH
IMAGEJ="ImageJ-linux64"

# Verbose printing?
VERBOSE=0

# TIFF input file:
INPUT_FILE=""

# Threshold options:
DISABLE_THRESHOLD=0
THRESHOLD_METHOD="default"
THRESHOLD_ARGS=()
THRESHOLD_OUTPUT_FILE=""

# Morphological opening options:
DISABLE_OPENING=0
OPENING_OUTPUT_FILE=""

# Skeletonize options:
DISABLE_SKELETONIZE=0

# TIFF output file:
OUTPUT_FILE=""

# Compiled macro file options:
MACRO_FILE=""
SAVE_MACRO_FILE=0
MACRO_WAS_TMPFILE=0

#
# usage()
#
# Print an online help summary for this script.
#
usage() {
    cat <<EOT
usage:

    $0 {options}

  options:
  
    -h/--help                           show this information
    -v/--verbose                        show a trace of actions as the script
                                        executes
    
    -i/--input <filepath>               read the input image from this TIFF file
    -o/--output <filepath>              write the filtered image to this TIFF file
    
    -d/--save-macro-file                by default the macro file is deleted if the
                                        run is successful; use this flag to retain
                                        the file no matter the outcome
    -m/--macro-file <filepath>          file to which the generated macro should be
                                        written; if not provided, a temporary file
                                        will be used
    
    --imagej <filepath>                 provide a specific path to an ImageJ-linux64
                                        executable; by default the bare command
                                        'ImageJ-linux64' is used, which will resolve
                                        against the current PATH
    
    --disable-threshold                 do NOT perform the threshold step
    -t/--threshold-method <method>      threshold algorithm
    
            <method>        description
            -------------   ----------------------------------------------------------
            default         ISO two-level
            manual          ISO two-level with explicit low,high
                            (see --threshold-arg)
            otsu-global     Otsu with automatic global thresholds
            otsu-local      Otsu with localized thresholds
                                    
    -a/--threshold-arg <arg>            add positional arguments associated with the
                                        threshold method
                                    
            <method>        example
            --------------  ----------------------------------------------------------
            manual          -a <low-value> -a <high-value>

    -1/--output-threshold <filepath>    after applying the threshold filter, write the
                                        intermediate image to a TIFF file
    
    --disable-opening                   do NOT perform the morphological opening step
    -2/--output-opening <filepath>      after applying the morphological opening filter, write
                                        the intermediate image to a TIFF file
    
    --disable-skeletonize               do NOT perform the skeletonize step

EOT
}

#
# write_macro_file()
#
# Given the options provided via the command line, generate a Fiji macro file containing the
# steps in the desired filter pipeline.  The script is written to stdout, so it's up to the
# caller to redirect it to a file, for example.
#
write_macro_file() {
    local argi=2

    cat <<EOT
args = split(getArgument()," ");
open(args[0]);
EOT
    [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Read initial image from ${EXEC_ARG_LIST[0]}\");"
    
    if [ $DISABLE_THRESHOLD -eq 0 ]; then
        [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Applying threshold filter $THRESHOLD_METHOD\");"
        case "$THRESHOLD_METHOD" in
            default)
                echo 'run("Make Binary", "method=Default background=Default calculate black");'
                ;;
            manual)
                EXEC_ARG_LIST+=("${THRESHOLD_ARGS[0]}" "${THRESHOLD_ARGS[1]}")
                echo "low_thresh = parseInt(args[${argi}]);"
                argi=$((argi+1))
                echo "high_thresh = parseInt(args[${argi}]);"
                argi=$((argi+1))
                echo "setThreshold(low_thresh , high_thresh);"
                echo 'run("Convert to Mask", "method=Default background=Dark black");'
                ;;
            otsu-global)
                echo 'run("Auto Threshold", "method=Otsu white stack use_stack_histogram");'
                ;;
            otsu-local)
                echo 'run("Auto Local Threshold", "method=Otsu radius=15 parameter_1=0 parameter_2=0 white");'
                ;;
        esac
        if [ -n "$THRESHOLD_OUTPUT_FILE" ]; then
            [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Saving threshold output to $THRESHOLD_OUTPUT_FILE\");"
            echo "saveAs(\"Tiff\", \"$THRESHOLD_OUTPUT_FILE\");"
        fi
    fi
    
    if [ $DISABLE_OPENING -eq 0 ]; then
        [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Applying morphological opening filter\");"
        echo "run(\"Open\", \"stack\");"
        if [ -n "$OPENING_OUTPUT_FILE" ]; then
            [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Saving morphological opening output to $OPENING_OUTPUT_FILE\");"
            echo "saveAs(\"Tiff\", \"$OPENING_OUTPUT_FILE\");"
        fi
    fi
    
    if [ $DISABLE_SKELETONIZE -eq 0 ]; then
        [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Forcing to 8-bit pixel format\");"
        echo "run(\"8-bit\");"
        [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Applying skeletonize filter\");"
        echo "run(\"Skeletonize (2D/3D)\");"
    fi
    
    [ $VERBOSE -ne 0 ] && echo "print(\"IMAGEJ: Saving final output to ${EXEC_ARG_LIST[1]}\");"
    cat <<EOT
saveAs("Tiff", args[1]);
eval("script", "System.exit(0);");

EOT
}

#
# Process CLI arguments
#
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        
        -v|--verbose)
            VERBOSE=1
            ;;
            
        -i|--input)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no file name provided with -i/--input" 1>&2
                exit 22
            fi
            shift
            INPUT_FILE="$1"
            ;;
        --input=*)
            if [[ ! $1 =~ --input=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            INPUT_FILE="${BASH_REMATCH[1]}"
            ;;

        -o|--output)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no file name provided with -o/--output" 1>&2
                exit 22
            fi
            shift
            OUTPUT_FILE="$1"
            ;;
        --output=*)
            if [[ ! $1 =~ --output=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            OUTPUT_FILE="${BASH_REMATCH[1]}"
            ;;
        
        --imagej)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no file name provided with --imagej" 1>&2
                exit 22
            fi
            shift
            IMAGEJ="$1"
            ;;
        --imagej=*)
            if [[ ! $1 =~ --imagej=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            IMAGEJ="${BASH_REMATCH[1]}"
            ;;

        --save-macro-file)
            SAVE_MACRO_FILE=1
            ;;
        -m|--macro-file)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no file name provided with -M/--macro-file" 1>&2
                exit 22
            fi
            shift
            MACRO_FILE="$1"
            ;;
        --macro-file=*)
            if [[ ! $1 =~ --macro-file=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            MACRO_FILE="${BASH_REMATCH[1]}"
            ;;
        
        --disable-threshold)
            DISABLE_THRESHOLD=1
            ;;
        -t|--threshold-method)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no method provided with -m/--threshold-method" 1>&2
                exit 22
            fi
            shift
            THRESHOLD_METHOD="$1"
            ;;
        --threshold-method=*)
            if [[ ! $1 =~ --threshold-method=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            THRESHOLD_METHOD="${BASH_REMATCH[1]}"
            ;;
        -a|--threshold-arg)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no value provided with -a/--threshold-arg" 1>&2
                exit 22
            fi
            shift
            THRESHOLD_ARGS+=("$1")
            ;;
        --threshold-arg=*)
            if [[ ! $1 =~ --threshold-arg=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            THRESHOLD_ARGS+=("${BASH_REMATCH[1]}")
            ;;
        -1|--output-threshold)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no file name provided with -1/--output-threshold" 1>&2
                exit 22
            fi
            shift
            THRESHOLD_OUTPUT_FILE="$1"
            ;;
        --output-threshold=*)
            if [[ ! $1 =~ --output-threshold=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            THRESHOLD_OUTPUT_FILE="${BASH_REMATCH[1]}"
            ;;
        
        --disable-opening)
            DISABLE_OPENING=1
            ;;
        -2|--output-opening)
            if [ $# -lt 2 ]; then
                echo "ERROR:  no file name provided with -2/--output-opening" 1>&2
                exit 22
            fi
            shift
            OPENING_OUTPUT_FILE="$1"
            ;;
        --output-opening=*)
            if [[ ! $1 =~ --output-opening=(.*) ]]; then
                echo "ERROR:  invalid option: $1" 1>&2
                exit 22
            fi
            OPENING_OUTPUT_FILE="${BASH_REMATCH[1]}"
            ;;
        
        --disable-skeletonize)
            DISABLE_SKELETONIZE=1
            ;;
    esac
    shift
done

# Check we got the necessary info:
if [ -z "$INPUT_FILE" ]; then
    echo "ERROR:  no input file provided"  1>&2
    exit 22
fi
if [ ! -r "$INPUT_FILE" ]; then
    echo "ERROR:  input file does not exist: $INPUT_FILE" 1>&2
    exit 1
fi
[ $VERBOSE -ne 0 ] && echo "INFO:   input file $INPUT_FILE exists" 1>&2
if [ -z "$OUTPUT_FILE" ]; then
    echo "ERROR:  no output file provided"  1>&2
    exit 22
fi
if [[ ! $THRESHOLD_METHOD =~ (default|manual|otsu-global|otsu-local) ]]; then
    echo "ERROR:  unknown threshold type: $THRESHOLD_METHOD" 1>&2
    exit 22
fi
if [ "$THRESHOLD_METHOD" = "manual" -a ${#THRESHOLD_ARGS[@]} -lt 2 ]; then
    echo "ERROR:  two arguments are required for the 'manual' threshold method" 1>&2
    exit 22
fi
[ $VERBOSE -ne 0 ] && echo "INFO:   threshold method $THRESHOLD_METHOD is ok" 1>&2

# Ensure the image paths are absolute paths, otherwise ImageJ will assume they're relative
# to its install directory:
INPUT_FILE="$(realpath "$INPUT_FILE")"
OUTPUT_FILE="$(realpath "$OUTPUT_FILE")"
if [ -n "$THRESHOLD_OUTPUT_FILE" ]; then
    THRESHOLD_OUTPUT_FILE="$(realpath "$THRESHOLD_OUTPUT_FILE")"
fi
if [ -n "$OPENING_OUTPUT_FILE" ]; then
    OPENING_OUTPUT_FILE="$(realpath "$OPENING_OUTPUT_FILE")"
fi

# Construct initial argument list consisting of the absolute paths to the input file
# and output file -- args[0] and args[1] in the macro context:
EXEC_ARG_LIST=( "$INPUT_FILE" "$OUTPUT_FILE" )

# Get the macro file written; additional arguments will be added to EXEC_ARG_LIST
# by write_macro_file():
if [ -z "$MACRO_FILE" ]; then
    MACRO_FILE="$(mktemp)"
    rc=$?
    if [ $rc -ne 0 ]; then
        echo "ERROR:  unable to create temporary file for macro (rc = $rc)"
        exit $rc
    fi
    MACRO_WAS_TMPFILE=1
fi
[ $VERBOSE -ne 0 ] && echo "INFO:   generating macro file $MACRO_FILE with content:" 1>&2
write_macro_file > "$MACRO_FILE"
[ $VERBOSE -ne 0 ] && sed 's/^/INFO:       /' "$MACRO_FILE" 1>&2

# Execute the macro:
if [ $VERBOSE -ne 0 ]; then
    echo "INFO:   executing ImageJ macro command:" 1>&2
    echo "INFO:       $IMAGEJ --headless -macro \"$MACRO_FILE\" $(printf "%s " "${EXEC_ARG_LIST[@]}")"
fi
"$IMAGEJ" --headless -macro "$MACRO_FILE" "$(printf "%s " "${EXEC_ARG_LIST[@]}")"
rc=$?
if [ $rc -ne 0 ]; then
    echo "ERROR:  failed while executing $IMAGEJ (rc = $rc)" 1>&2
fi

# Remove the macro file?
if [ $SAVE_MACRO_FILE -eq 0 ]; then
    rm -f "$MACRO_FILE"
    [ $VERBOSE -ne 0 ] && echo "INFO:   removed macro file $MACRO_FILE" 1>&2
else
    [ $VERBOSE -ne 0 -o $MACRO_WAS_TMPFILE -ne 0 ] && echo "INFO:   macro file $MACRO_FILE was not deleted" 1>&2
fi

# All done, exit using the return code from ImageJ:
[ $VERBOSE -ne 0 ] && echo "INFO:   execution complete" 1>&2
exit $rc
