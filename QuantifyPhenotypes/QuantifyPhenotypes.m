function [] = QuantifyPhenotypes(data_name, infile_cells, infile_stomates, infile_fungal_skeleton, infile_surface_map, infile_surface_image, penetration_thresh, scale, outfile_results, outfile_visualization)
%       Quantifies segmented structures. If a certain structure is not
%       needed/wanted, leave a blank path "" and the processing will be
%       skipped over

%       One of infile_cells, infile_stomates should be given. 
%       If infile_fungal_skeleton is given, so should the surface map to
%       calculate penetrations

%       data_name -- string name of sample/data to be attached to
%       quantified results. Will appear in the output xls file in a column
%      
%   
%       infile_cells --   path to 2D segmented cell structures
%
%       infile_stomates --  path to 2D segmented stomates
%
%
%       infile_surface_map -- path to .txt file generated by the surface
%       estimator. Each 2D pixel is given a depth to where the surface of
%       the plant is. For calculating penetration events.
%         
%       infile_surface_image -- path to image file generated by the surface
%       estimator. For visualization
%
%       infile_infile_fungal_skeleton -- path to 3D tiff stack of segmented
%       fungal hyphae skeleton
%
%       penetration_thresh --  number of slices the fungus must go down
%       before considered a penetration event. We used 6 in our experiments
%
%       scale -- Nd array containing pixel to um scaling. e.g. [1 1 10] would
%       indicate 1 pixel = 1 um in the x,y directions and 10 pixels = 1 um
%       in the z direction
%
%       outfile_results --  path to write quantified values to. 
%
%       outfile_visualization --  path to write overlayed visualization.
%       Only will work if cells, stomates, fungus, and surface are given.
%
%
addpath(genpath('./Skel2Graph3d'));

%Read in cells adusting to standardized size
if ~exist(infile_cells,'file')
   cells_image = [];
else
   cells_image = logical(imread(infile_cells));
   img_width = size(cells_image,2);
   img_height = size(cells_image,1);
   cells_image = cells_image(1:img_height, 1:img_width);
   cells_image_fat = imdilate(cells_image, strel('disk', 1));
   cells_image_colored = convertToColor(cells_image_fat, [0 0 1]);
   cells_image_colored2 = convertToColor(cells_image_fat, [1 1 1]);
end

%Read in stomates adusting to standardized size
%If cells exist, stomates could break segmentation in some places,so add
%them in
if ~exist(infile_stomates,'file')
   stomates_image = [];
else
   stomates_image = logical(imread(infile_stomates));
   if(~exist('width'))
      img_width =  size(stomates_image,2);
      img_height =  size(stomates_image,1);
   end
   stomates_image = stomates_image(1:img_height, 1:img_width);
   stomates_image_colored = convertToColor(stomates_image, [0 1 0]);
   if(~isempty(cells_image))
      cells_image = cells_image | stomates_image; 
   end 
end

%Read in surface map and adjust to standardized size
if ~exist(infile_surface_map,'file')
   surface_map = [];
else
   surface_map = readSurfaceMap(infile_surface_map);
   surface_map = surface_map(1:img_height, 1:img_width);
end

%Read in surface map and adjust to standardized size
if ~exist(infile_surface_image,'file')
   surface_image = [];
else
   surface_image = imread(infile_surface_image);
   surface_image = surface_image(1:img_height, 1:img_width);
   surface_image_colored = convertToColor(double(surface_image)/255, [1 1 1]);
end

%Read in skeleton and adjust to standardized size
if ~exist(infile_fungal_skeleton,'file')
   skeleton = [];
else
   skeleton = logical(readTiffStack(infile_fungal_skeleton));
   skeleton = skeleton(1:img_height, 1:img_width, :);
end

%If the surface map and skeleton are given, calculate the penetration
%events
if(~isempty(skeleton) && ~isempty(surface_map))
%    [ r_pen, c_pen, z_pen, depths, breadths, volumes, mip] = findSurfacePenetrations(skeleton, surface_map, penetration_thresh); 
   %visualizeSkeleton( skeleton , 'r.' ); hold on; plot3(c_pen, r_pen, z_pen, 'gx', 'MarkerSize', 50, 'LineWidth', 3);
   [fungus_table, r_pen, c_pen, z_pen, depths, breadths, volumes, mip] = QuantifyFungus(skeleton, surface_map, penetration_thresh, scale);
   Data_Identifier = repmat({data_name}, [height(fungus_table), 1]); 
   fungus_table = addvars(fungus_table,Data_Identifier,'Before','FungalHyphaeID');
   fungus_table_old = readSheet(outfile_results, 'FungalHyphae');
   writetable([fungus_table_old; fungus_table], outfile_results, 'FileType', 'spreadsheet', 'Sheet', 'FungalHyphae');
   mip_adjusted = imdilate(bwmorph(mip, 'skel', Inf), strel('disk', 1));
   fungus_image_colored = convertToColor(mip_adjusted, [1 0 0]); 
else
    r_pen = [];
    c_pen = [];
    z_pen = [];
    mip = [];
end

%Quantify the stomates
if(~isempty(stomates_image) && ~isempty(r_pen))
%     stomata_quant = quantifyStomataNearPenetrations(stomates_image, r_pen, c_pen, z_pen);
      stomata_table = quantifyStomata(stomates_image);
      Data_Identifier = repmat({data_name}, [height(stomata_table), 1]); 
      stomata_table = addvars(stomata_table,Data_Identifier,'Before','StomateID');
      stomata_table_old = readSheet(outfile_results, 'Stomata');
      writetable([stomata_table_old; stomata_table], outfile_results, 'FileType', 'spreadsheet', 'Sheet', 'Stomata');
end

%Quantify the cells
if(~isempty(cells_image) && ~isempty(r_pen))
%     cells_quant = quantifyCellsNearPenetrations(cells_image, r_pen, c_pen, z_pen);
      cells_table = quantifyCells(cells_image, scale);
      Data_Identifier = repmat({data_name}, [height(cells_table), 1]);
      cells_table = addvars(cells_table,Data_Identifier,'Before','CellID');
      cells_table_old = readSheet(outfile_results, 'Cells');
      writetable([cells_table_old; cells_table], outfile_results, 'FileType', 'spreadsheet', 'Sheet', 'Cells');
end

%Output visualization
if(~isempty(skeleton) && ~isempty(surface_map) && ~isempty(stomates_image) && ~isempty(cells_image))
   combined_image = cells_image_colored + stomates_image_colored + surface_image_colored ;
   combined_image2 = cells_image_colored2 + stomates_image_colored;
   combined_image3 = fungus_image_colored + cells_image_colored + stomates_image_colored + surface_image_colored ;
   combined_image4 = fungus_image_colored + cells_image_colored2 + stomates_image_colored; 
   
   if(~isempty(outfile_visualization))
       figure; imshow(combined_image, []); hold on; plot(c_pen, r_pen, 'rx', 'MarkerSize', 10, 'LineWidth', 3);
       saveas(gcf,[outfile_visualization '_1.png']);
       figure; imshow(combined_image2, []); hold on; plot(c_pen, r_pen, 'rx', 'MarkerSize', 10, 'LineWidth', 3);
       saveas(gcf,[outfile_visualization '_2.png']);
       figure; imshow(combined_image3, []); hold on; plot(c_pen, r_pen, 'rx', 'MarkerSize', 10, 'LineWidth', 3);
       saveas(gcf,[outfile_visualization '_3.png']);
       figure; imshow(combined_image4, []); hold on; plot(c_pen, r_pen, 'rx', 'MarkerSize', 10, 'LineWidth', 3);
       saveas(gcf,[outfile_visualization '_4.png']);
       close all;
   end
end


end

